###################################################
###################################################
## SETTING MAIN DATA MATRIX
###################################################
## (AQUESTA MATRIU POT ESTAR, O NO, PREVIAMENT ESCALADA I/O NORMALITZADA!)
## (HA DE TENIR, EXCLUSIVAMENT, LES EXPRESSIONS DELS FEATS (rows) PER CADA MOSTRA (cols)
data <- cnts # !!!!! matriu de counts o expression matrix que toqui...
##################################################


###################################################
###################################################
## SETTING TARGETS INFO
###################################################
## EDITAR AQUI ELS FACTORS QUE ESTIGUIN IMPLICATS EN CADA ESTUDI
posneg <- sapply(colnames(data), function(v){strsplit(v, '[.]')[[1]][3]}, USE.NAMES = FALSE)
patient <- sapply(colnames(data), function(v){strsplit(v, '[.]')[[1]][1]}, USE.NAMES = FALSE)
#type <- sapply(colnames(data), function(v){strsplit(v, '[.]')[[1]][1]}, USE.NAMES = FALSE)
#type2 <- ifelse(type != "Ctrl", paste0("Endo_", type), type)
sampleID <- paste(posneg, patient, sep = ".")
#sampleID <- paste(type, posneg, patient, sep = ".")

targets <- data.frame(patient, posneg)
#targets <- data.frame(type, patient, posneg)
rownames(targets) <- sampleID
show(targets)

# canviem etiquetes colnames per facilitar el seguents passos
colnames(data) <- sampleID
##################################################


###################################################
###################################################
## COMPARISONS DEFINITION
###################################################

# Creem comparacions (llistes amb tants elements com comparacions tinguem)
ref <- c("Neg")
namesref <- c("Neg")

samp <- c("Pos")
namessamp <- c("Pos")

paired <- c(TRUE)

comparisons <- data.frame(ref, namesref, samp, namessamp, paired)
show(comparisons)
###################################################


###################################################
###################################################
## Mapping Symbols to Gene IDs
###################################################

## AQUESTA LLISTA S'HA D'HAVER DESCARREGAT DE BIODBNET
## ON L'HAUREM GENERADA A PARTIR DELS SYMBOLS DE LA MATRIU D'EXPRESSIO O COUNTS
## LO IDEAL SERIA PREPARAR UNA FUNCIO QUE FACI AIXO AMB BIOMART SENSE PASSAR PER BIODBNET
############ VEURE CODI QUE EMPRA BIOMART DEL CHUNK DE SOTA ############
sym2id <- read.table(file = "bioDBnet_db2db_symbol2ID_all.txt", 
                     header = TRUE, sep = "\t", na.strings = c("-"))
head(sym2id)
tail(sym2id)
dim(sym2id)

## AQUI HEM DE TENIR LA MATRIU D'EXPRESSIO O DE COUNTS PREVIAMENT FETA
## (LA QUE HEM FET SERVIR PER OBTENIR EL MAPEJAT DE BIODBNET)
## A LA QUE POSAREM ELS GENE IDS COM A ROWNAMES
data.wGeneId <- data 
dim(data.wGeneId)
## setting symbols as row names, removing cases with empty symbol
rownames(data.wGeneId) <- sym2id.woGEOall$Gene.ID
#length(which(is.na(rownames(data.wGeneId))))
data.ok <- data.wGeneId[which(!is.na(rownames(data.wGeneId))), ]
dim(data.ok)


###################################################
###################################################
## Mapping AffyIDs to GeneIDs
###################################################

#source("http://bioconductor.org/biocLite.R")
#biocLite("mogene21sttranscriptcluster.db")
library(mogene21sttranscriptcluster.db)

## create data frame with annotation fields from mogene21st...
Annot <- data.frame(SYMBOL=sapply(contents(mogene21sttranscriptclusterSYMBOL), paste, collapse=","), 
                    DESC=sapply(contents(mogene21sttranscriptclusterGENENAME), paste, collapse=","),
                    ENTREZID=sapply(contents(mogene21sttranscriptclusterENTREZID), paste, collapse=","),
                    ENSEMBLID=sapply(contents(mogene21sttranscriptclusterENSEMBL), paste, collapse=","))
dim(Annot)

## remove cases which entrez ID is "NA"
Annot.new <- Annot[which(Annot$ENTREZID!="NA"),]
dim(Annot.new)

## put AffyID as new column in both new data frames
Annot.new$AffyID <- rownames(Annot.new)
dim(Annot.new)
head(Annot.new)
data.new <- as.data.frame(data)
data.new$AffyID <- rownames(data.new)
head(data.new)

## merge data frames by AffyID column
data.merged <- merge(data.new, Annot.new, by="AffyID")
head(data.merged)

## check and remove rows with duplicated gene ID
#which(is.na(data.merged$ENTREZID))
data.ok <- data.merged
length(data.ok$ENTREZID)
length(unique(data.ok$ENTREZID))
data.ok <- data.ok[-which(duplicated(data.ok$ENTREZID)), ]
length(data.ok$ENTREZID)
length(unique(data.ok$ENTREZID))

## set gene IDs as rownames of the merged data frame
rownames(data.ok) <- data.ok$ENTREZID

## chop merged data frame in order to contain only expression values from original samples
head(data.ok)
data.ok <- data.ok[,-1]
head(data.ok)
head(data)
dim(data)[2]
data.ok <- data.ok[,1:dim(data)[2]]
head(data.ok)
###################################################
###################################################


###################################################
###################################################
## Pathview analysis with GAGE against KEGG
###################################################

library(gage)
library(pathview)
library(matrixStats)

colnames(data.ok)

alpha  <- 0.05    # threshold for filtering results (q-values) from Gene Set Enrichment Analysis
maxPaths <- 20    # max number of pathways to be plotted out for each comparison
workingDir <- getwd() # specify here the working dir if it is not the actual folder


show(comparisons)
#comparisons <- comparisons[c(1,2,6,9,12,15), ]

stime_kegg <- system.time({
  for(i in 1:dim(comparisons)[1]){
    
    setwd(workingDir)
    cond1 <- comparisons[i,"ref"]
    cond2 <- comparisons[i,"samp"]
    sample.comp <- grep(paste0(cond1,"|",cond2), colnames(data.ok), value = TRUE)

    data.comp <- data.ok[ ,sample.comp]
    dim(data.comp)
    
    comp <- NULL
    comp <- paste0(namessamp[i],".vs.",namesref[i])
    print(paste("KEGG pathways for:", comp))
    
    if (!dir.exists(paste0("results/", comp))) dir.create(paste0("results/", comp)) 
    setwd(paste0("results/", comp))
    #getwd()

    samp.idx <- grep(cond2, rownames(targets[sample.comp, ]))
    ref.idx <- grep(cond1, rownames(targets[sample.comp, ]))

    # load KEGG's data from gage package
    data(kegg.gs)


#    #############################################
#    #############################################
#    #####  Uncomment this part to create a summary of std dev...
#    #####  Write summary of Standard Deviations of expression values into a file
#    sink(file = paste("stdevSummary", as.character(comp) ,"txt", sep="."))
#    print(paste("Comparison:", comp))
#    print(paste(" Group: ", cond2, " N=", 
#                dim(data.comp[, samp.idx])[2], " Genes=", dim(data.comp[, samp.idx])[1],
#                sep=""))
#    print(summary(rowSds(data.comp[, samp.idx])))
#    print(paste(" Group: ", cond1, " N=", 
#                dim(data.comp[, ref.idx])[2], " Genes=", dim(data.comp[, ref.idx])[1],
#                sep=""))
#    print(summary(rowSds(data.comp[, ref.idx])))
#    sink()
#    #############################################


    ## create gage-kegg results and matrix of differences
    if (!comparisons$paired[i]) {
      cnts.kegg.p <- gage(data.comp, gsets = kegg.gs, ref = ref.idx,
                          samp = samp.idx, compare = "unpaired")
      cnts.d <-  data.comp[, samp.idx] - rowMeans(data.comp[, ref.idx])
    }
    if (comparisons$paired[i]) {
      cnts.kegg.p <- gage(data.comp, gsets = kegg.gs, ref = ref.idx,
                          samp = samp.idx, compare = "paired")
      cnts.d <-  data.comp[, samp.idx] - data.comp[, ref.idx]
    }
    
    # show details and write diff matrix as csv
    print(paste0(c("cnts.d rows=","cnts.d cols="), dim(cnts.d)))
    #head(cnts.d)
    #tail(cnts.d)
    ## write conts.d as a probe for debugging
    write.csv(file = "cnts.diffs.csv", cnts.d)
    
    #################################################
    ## select up-regulated pathways (q-value < alpha)
    kegg.up <- as.data.frame(cnts.kegg.p$greater)
    #class(kegg.up)
    #head(kegg.up)
    kegg.up.selected <- kegg.up[which(kegg.up$q.val < alpha), ]
    print(paste0("kegg.up.selected: ", dim(kegg.up.selected)[1]))
    #head(kegg.up.selected)
    #class(kegg.up.selected)
    write.csv2(file = "selected.KEGG.up.csv", kegg.up.selected)
    
    ## select up-regulated pathways (q-value < alpha)
    sel.up <- kegg.up$q.val < alpha
    
    ## obtain Ids of top up-regulated pathways
    path.ids.up <- rownames(cnts.kegg.p$greater)[which(sel.up)]
    path.ids.up
    path.ids2.up <- substr(path.ids.up, 1, 8)
    
    if (length(path.ids2.up)>maxPaths){limIds <- maxPaths} else {limIds <- length(path.ids2.up)}
    ## up-regulated pathways (top number=maxPaths) generated by pathview
    if(dim(cnts.d)[2]>16){
      pv.out.list.up <- sapply(path.ids2.up[1:limIds], 
                               function(pid) try(pathview(
                                                #gene.data = cnts.d, pathway.id = pid,
                                                gene.data = cnts.d, pathway.id = pid, kegg.native = FALSE, pdf.size =c(10,10),
                                                low = list(gene="green", cpd="blue"), 
                                                mid = list(gene="gray", cpd="gray"), 
                                                high = list(gene="magenta", cpd="yellow"),
                                                limit = list(gene=2, cpd=2),
                                                bins = list(gene=20, cpd=20),
                                                species = "hsa"), TRUE))
    }else{
      pv.out.list.up <- sapply(path.ids2.up[1:limIds], 
                               function(pid) try(pathview(
                                                gene.data = cnts.d, pathway.id = pid,
                                                #gene.data = cnts.d, pathway.id = pid, kegg.native=FALSE, pdf.size =c(10,10),
                                                low = list(gene="green", cpd="blue"), 
                                                mid = list(gene="gray", cpd="gray"), 
                                                high = list(gene="magenta", cpd="yellow"),
                                                limit = list(gene=2, cpd=2),
                                                bins = list(gene=20, cpd=20),
                                                species = "hsa"), TRUE))
    }
    
    #################################################
    ## select dwn-regulated pathways (q-value < alpha)
    kegg.dwn <- as.data.frame(cnts.kegg.p$less)
    #class(kegg.dwn)
    #head(kegg.dwn)
    kegg.dwn.selected <- kegg.dwn[which(kegg.dwn$q.val < alpha), ]
    print(paste0("kegg.dwn.selected: ", dim(kegg.dwn.selected)[1]))
    #head(kegg.dwn.selected)
    #class(kegg.dwn.selected)
    write.csv2(file = "selected.KEGG.dwn.csv", kegg.dwn.selected)
    
    ## select dwn-regulated pathways (q-value < alpha)
    sel.dwn <- kegg.dwn$q.val < alpha
    
    ## obtain Ids of top dwn-regulated pathways
    path.ids.dwn <- rownames(cnts.kegg.p$less)[which(sel.dwn)]
    path.ids.dwn
    path.ids2.dwn <- substr(path.ids.dwn, 1, 8)
    
    if (length(path.ids2.dwn)>maxPaths){limIds <- maxPaths} else {limIds <- length(path.ids2.dwn)}
    ## dwn-regulated pathways (top number=maxPaths) generated by pathview
    if(dim(cnts.d)[2]>16){
      pv.out.list.dwn <- sapply(path.ids2.dwn[1:limIds], 
                               function(pid) try(pathview(
                                 #gene.data = cnts.d, pathway.id = pid,
                                 gene.data = cnts.d, pathway.id = pid, kegg.native=FALSE, pdf.size = c(10,10),
                                 low = list(gene="green", cpd="blue"), 
                                 mid = list(gene="gray", cpd="gray"), 
                                 high = list(gene="magenta", cpd="yellow"),
                                 limit = list(gene=2, cpd=2),
                                 bins = list(gene=20, cpd=20),
                                 species = "hsa"), TRUE))
    }else{
      pv.out.list.dwn <- sapply(path.ids2.dwn[1:limIds], 
                               function(pid) try(pathview(
                                 gene.data = cnts.d, pathway.id = pid,
                                 #gene.data = cnts.d, pathway.id = pid, kegg.native=FALSE, pdf.size = c(10,10),
                                 low = list(gene="green", cpd="blue"), 
                                 mid = list(gene="gray", cpd="gray"), 
                                 high = list(gene="magenta", cpd="yellow"),
                                 limit = list(gene=2, cpd=2),
                                 bins = list(gene=20, cpd=20), 
                                 species = "hsa"), TRUE))
    }
    
    
    setwd(workingDir)
  }
})[3]
stime_kegg/60


###################################################
###################################################
#### END OF THE SCRIPT
###################################################
###################################################
